import Head from "next/head";
import Draggable from 'react-draggable';
import { useRef, useState } from 'react';
import { Old_Standard_TT } from 'next/font/google'

const oldStandardTT = Old_Standard_TT({
  subsets: ['latin'],
  weight: ['400', '700'],
  style: ['normal', 'italic'],
});

function Node({ label, index, nodes, setNodes }) {
  const draggableRef = useRef()
  
  let eventLogger = (e, data) => {
    let newNodes = nodes.slice();
    newNodes[index] = {
      ...newNodes[index],
      position: [data.x, data.y]
    }
    setNodes(newNodes)
  };
  
  return (
    <Draggable 
      nodeRef={draggableRef}
      grid={[25, 25]}
      bounds={{ left: 0, top: 0, right: 560, bottom: 360}}
      onStart={eventLogger}
      onDrag={eventLogger}
      onStop={eventLogger}
      key={`node_${index}`}
    >
      <div ref={draggableRef} style={{
        width: '40px',
        height: '40px',
        border: '1px solid black',
        borderRadius: '999px',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'absolute',
        top: 0,
        left: 0,
        background: "white",
        zIndex: 1
      }}>{label}</div>
    </Draggable>
  )
}

function Edge({nodes, startNode, endNode}){
  if(nodes[startNode].position[0] == nodes[endNode].position[0]) {
    let height = Math.abs(nodes[startNode].position[1] - nodes[endNode].position[1])
    return (
      <div style={{
        position: 'absolute',
        left: `${nodes[startNode].position[0] + 20}px`,
        top: `${(nodes[startNode].position[1] > nodes[endNode].position[1] ? nodes[endNode].position[1] : nodes[startNode].position[1]) + 20}px`,
        height: `${height}px`,
        borderLeft: '1px solid black',
        zIndex: 0
      }} />
    )
  }
  
  
  let leftNode = nodes[startNode].position[0] >= nodes[endNode].position[0] ? endNode : startNode
  let rightNode = nodes[startNode].position[0] >= nodes[endNode].position[0] ? startNode : endNode
  let width = Math.abs(nodes[leftNode].position[0] - nodes[rightNode].position[0])
  let height = Math.abs(nodes[leftNode].position[1] - nodes[rightNode].position[1])
  let hyptonuse = Math.sqrt(
    Math.pow(width, 2) +
    Math.pow(height, 2)
  )
  let angle = Math.acos(
    (Math.pow(hyptonuse, 2) + Math.pow(width, 2) - Math.pow(height, 2)) 
    / (2 * hyptonuse * width)
  )
  let rotationModifier = nodes[leftNode].position[1] >= nodes[rightNode].position[1] ? -1 : 1
  return (
    <div style={{
      position: 'absolute',
      left: `${nodes[leftNode].position[0] + 20}px`,
      top: `${nodes[leftNode].position[1] + 20}px`,
      width: `${hyptonuse}px`,
      borderTop: '1px solid black',
      zIndex: 0,
      transformOrigin: 'top left',
      transform: `rotate(${rotationModifier * angle}rad)`
    }} />
  )
}

export default function Home() {
  const [nodes, setNodes] = useState([])
  const [edgeInput, setEdgeInput] = useState("")
  function edges() {
    return edgeInput.split("\n")
      .map(
        edge => 
          edge.trim()
              .split(",")
              .map(n => n.trim())
      
      )
      .filter((edge) => edge[0] && edge[1] && parseInt(edge[0]) < nodes.length && parseInt(edge[1]) < nodes.length)
  }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        height: '100vh',
        flexDirection: 'column'
      }}>
        <div className={oldStandardTT.className} style={{ width: '600px', height: '400px', border: '1px solid black', position: 'relative'}}>
          {nodes.map((node, index) => (<Node label={node.label} index={index} nodes={nodes} setNodes={setNodes} />))}
          {edges().map(edge => <Edge nodes={nodes} startNode={edge[0]} endNode={edge[1]} />)}
        </div>
        <button onClick={() => setNodes([...nodes, { label: nodes.length, position: [0, 0] }])}>
          Add node
        </button>
        <textarea onChange={(e) => setEdgeInput(e.target.value)} value={edgeInput} />
        <div>{JSON.stringify(nodes)}</div>
      </div>
    </>
  );
}
