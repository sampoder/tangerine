import Head from "next/head";
import Draggable from "react-draggable";
import { useRef, useState } from "react";
import { Old_Standard_TT, IBM_Plex_Mono } from "next/font/google";

const oldStandardTT = Old_Standard_TT({
  subsets: ["latin"],
  weight: ["400", "700"],
  style: ["normal", "italic"],
});

const ibmPlexMono = IBM_Plex_Mono({
  subsets: ["latin"],
  weight: ["400", "700"],
  style: ["normal", "italic"],
});

function Node({
  label,
  index,
  nodes,
  setNodes,
  selectedNode,
  setSelectedNode,
}) {
  const draggableRef = useRef();

  let eventLogger = (e, data) => {
    let newNodes = nodes.slice();
    newNodes[index] = {
      ...newNodes[index],
      position: [data.x, data.y],
    };
    setNodes(newNodes);
  };

  return (
    <Draggable
      nodeRef={draggableRef}
      grid={[25, 25]}
      onStart={eventLogger}
      onDrag={eventLogger}
      onStop={eventLogger}
      key={`node_${index}`}
      bounds="parent"
    >
      <div
        ref={draggableRef}
        onClick={() => setSelectedNode(index)}
        style={{
          width: "60px",
          height: "60px",
          borderRadius: "999px",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          position: "absolute",
          background: "white",
          boxSizing: "border-box",
          border:
            selectedNode == index ? "2px solid #338eda" : "1px solid black",
          zIndex: 1,
          cursor: "pointer",
        }}
      >
        {label}
      </div>
    </Draggable>
  );
}

function Edge({ nodes, startNode, endNode }) {
  if (nodes[startNode].position[0] == nodes[endNode].position[0]) {
    let height = Math.abs(
      nodes[startNode].position[1] - nodes[endNode].position[1],
    );
    return (
      <div
        style={{
          position: "absolute",
          left: `${nodes[startNode].position[0] + 30}px`,
          top: `${(nodes[startNode].position[1] > nodes[endNode].position[1] ? nodes[endNode].position[1] : nodes[startNode].position[1]) + 30}px`,
          height: `${height}px`,
          borderLeft: "1px solid black",
          zIndex: 0,
        }}
      />
    );
  }

  let leftNode =
    nodes[startNode].position[0] >= nodes[endNode].position[0]
      ? endNode
      : startNode;
  let rightNode =
    nodes[startNode].position[0] >= nodes[endNode].position[0]
      ? startNode
      : endNode;
  let width = Math.abs(
    nodes[leftNode].position[0] - nodes[rightNode].position[0],
  );
  let height = Math.abs(
    nodes[leftNode].position[1] - nodes[rightNode].position[1],
  );
  let hyptonuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
  let angle = Math.acos(
    (Math.pow(hyptonuse, 2) + Math.pow(width, 2) - Math.pow(height, 2)) /
      (2 * hyptonuse * width),
  );
  let rotationModifier =
    nodes[leftNode].position[1] >= nodes[rightNode].position[1] ? -1 : 1;
  return (
    <div
      style={{
        position: "absolute",
        left: `${nodes[leftNode].position[0] + 30}px`,
        top: `${nodes[leftNode].position[1] + 30}px`,
        width: `${hyptonuse}px`,
        borderTop: "1px solid black",
        zIndex: 0,
        transformOrigin: "top left",
        transform: `rotate(${rotationModifier * angle}rad)`,
      }}
    />
  );
}

export default function Home() {
  const [nodes, setNodes] = useState([]);
  const [edges, setEdges] = useState([]);
  const [selectedNode, setSelectedNode] = useState(null);

  return (
    <>
      <Head>
        <title>Tangerine</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üçä</text></svg>"
        />
      </Head>
      <div
        style={{
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          height: "100vh",
          flexDirection: "column",
          fontSize: "24px",
        }}
      >
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "2fr 1fr",
            gap: "24px",
          }}
        >
          <div
            className={oldStandardTT.className}
            style={{
              width: "60vw",
              height: "40vw",
              border: "2px solid black",
              position: "relative",
              borderRadius: "8px",
            }}
          >
            {nodes.map((node, index) => (
              <Node
                label={node.label}
                index={index}
                nodes={nodes}
                setNodes={setNodes}
                selectedNode={selectedNode}
                setSelectedNode={setSelectedNode}
              />
            ))}
            {edges.map((edge) => (
              <Edge nodes={nodes} startNode={edge[0]} endNode={edge[1]} />
            ))}
            <div
              onClick={() =>
                setNodes([...nodes, { label: nodes.length, position: [0, 0] }])
              }
              style={{
                width: "60px",
                height: "60px",
                borderRadius: "999px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                position: "absolute",
                bottom: 16,
                right: 16,
                background: "white",
                boxSizing: "border-box",
                border: "2px solid currentColor",
                fontWeight: 700,
                zIndex: 1,
                cursor: "pointer",
              }}
              className="add"
            >
              +
            </div>
          </div>
          <div
            style={{ border: "2px solid black", borderRadius: "8px" }}
            className={ibmPlexMono.className}
          >
            <div
              style={{
                background: "#e0e6ed",
                padding: "16px",
                fontWeight: 800,
                borderTopLeftRadius: "8px",
                borderTopRightRadius: "8px",
              }}
            >
              {selectedNode == null
                ? "Select a node to edit..."
                : `Edit Node #${selectedNode}`}
            </div>
            <div style={{ padding: "8px 16px", paddingBottom: "0px" }}>
            <small><i>Select nodes to create edges to</i></small>
            </div>
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(8, 1fr)",
                padding: "16px",
                gap: "16px",
              }}
            >
              {selectedNode == null ? (
                <></>
              ) : (
                nodes.map((node, index) => {
                  if (index == selectedNode) {
                    return <></> 
                  } else {
                    let edge = []
                    if(selectedNode > index) {
                      edge = [index, selectedNode]
                    } else {
                      edge = [selectedNode, index]
                    }
                    return (
                      <div
                        style={{
                          border: "1px solid black",
                          height: "40px",
                          width: "40px",
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "center",
                          boxSizing: "border-box",
                          background: edges.filter(e => e[0] == edge[0] && e[1] == edge[1]).length > 0 ? "#5bc0de" : "white",
                        }}
                        onClick={() => {
                          if(edges.filter(e => e[0] == edge[0] && e[1] == edge[1]).length > 0) {
                            setEdges(edges.filter(e => e[0] != edge[0] && e[1] != edge[1]))
                          } else {
                            setEdges([...edges, edge])
                          }
                        }}
                      >
                        {index}
                      </div>
                    )
                  }
                })
              )}
            </div>
          </div>
        </div>
      </div>
      <style jsx>
        {`
          .add:hover {
            background: #5bc0de !important;
          }
        `}
      </style>
    </>
  );
}
